{"ast":null,"code":"import { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_UPDATE_REQUEST, USER_DETAILS_UPDATE_SUCCESS } from \"../constants/userConstants\";\nexport const details = userData => async dispatch => {\n  dispatch({\n    type: USER_DETAILS_REQUEST,\n    payload: userData\n  });\n\n  try {\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: userData\n    }); // const userObj = {};\n    // userObj[userData[\"userId\"]] = userData;\n    // console.log(\"userObj ----> \", userObj);\n\n    let existingUsersData = JSON.parse(localStorage.getItem(\"userDetailsV2\")) || [];\n    console.log(\"existingUsersData ---> \", existingUsersData);\n    existingUsersData.push(userData);\n    console.log(\"updatedObject ---> \", existingUsersData);\n    localStorage.setItem(\"userDetailsV2\", JSON.stringify(existingUsersData));\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: {}\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  dispatch({\n    type: USER_DETAILS_UPDATE_REQUEST,\n    payload: user\n  });\n  const {\n    userDetails: {\n      userDetailsV2\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.put(`/api/users/profile`, user, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_DETAILS_UPDATE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/home/user/Desktop/user-app/src/actions/userActions.js"],"names":["USER_DETAILS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_UPDATE_REQUEST","USER_DETAILS_UPDATE_SUCCESS","details","userData","dispatch","type","payload","existingUsersData","JSON","parse","localStorage","getItem","console","log","push","setItem","stringify","error","updateUserProfile","user","getState","userDetails","userDetailsV2","data","Axios","put","headers","Authorization","userInfo","token","USER_SIGNIN_SUCCESS","message","response","USER_UPDATE_PROFILE_FAIL"],"mappings":"AAAA,SACEA,iBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,2BAJF,EAKEC,2BALF,QAMO,4BANP;AAQA,OAAO,MAAMC,OAAO,GAAIC,QAAD,IAAc,MAAOC,QAAP,IAAoB;AACvDA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEP,oBADC;AAEPQ,IAAAA,OAAO,EAAEH;AAFF,GAAD,CAAR;;AAIA,MAAI;AACFC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,oBAAR;AAA8BO,MAAAA,OAAO,EAAEH;AAAvC,KAAD,CAAR,CADE,CAGF;AACA;AACA;;AACA,QAAII,iBAAiB,GACnBC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAX,KAAqD,EADvD;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCN,iBAAvC;AACAA,IAAAA,iBAAiB,CAACO,IAAlB,CAAuBX,QAAvB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCN,iBAAnC;AACAG,IAAAA,YAAY,CAACK,OAAb,CAAqB,eAArB,EAAsCP,IAAI,CAACQ,SAAL,CAAeT,iBAAf,CAAtC;AACD,GAZD,CAYE,OAAOU,KAAP,EAAc;AACdb,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER,iBADC;AAEPS,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID;AACF,CAvBM;AAyBP,OAAO,MAAMY,iBAAiB,GAAIC,IAAD,IAAU,OAAOf,QAAP,EAAiBgB,QAAjB,KAA8B;AACvEhB,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL,2BAAR;AAAqCM,IAAAA,OAAO,EAAEa;AAA9C,GAAD,CAAR;AACA,QAAM;AACJE,IAAAA,WAAW,EAAE;AAAEC,MAAAA;AAAF;AADT,MAEFF,QAAQ,EAFZ;;AAGA,MAAI;AACF,UAAM;AAAEG,MAAAA;AAAF,QAAW,MAAMC,KAAK,CAACC,GAAN,CAAW,oBAAX,EAAgCN,IAAhC,EAAsC;AAC3DO,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASC,QAAQ,CAACC,KAAM;AAA1C;AADkD,KAAtC,CAAvB;AAGAzB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,2BAAR;AAAqCK,MAAAA,OAAO,EAAEiB;AAA9C,KAAD,CAAR;AACAnB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEyB,mBAAR;AAA6BxB,MAAAA,OAAO,EAAEiB;AAAtC,KAAD,CAAR;AACAb,IAAAA,YAAY,CAACK,OAAb,CAAqB,UAArB,EAAiCP,IAAI,CAACQ,SAAL,CAAeO,IAAf,CAAjC;AACD,GAPD,CAOE,OAAON,KAAP,EAAc;AACd,UAAMc,OAAO,GACXd,KAAK,CAACe,QAAN,IAAkBf,KAAK,CAACe,QAAN,CAAeT,IAAf,CAAoBQ,OAAtC,GACId,KAAK,CAACe,QAAN,CAAeT,IAAf,CAAoBQ,OADxB,GAEId,KAAK,CAACc,OAHZ;AAIA3B,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE4B,wBAAR;AAAkC3B,MAAAA,OAAO,EAAEyB;AAA3C,KAAD,CAAR;AACD;AACF,CAnBM","sourcesContent":["import {\n  USER_DETAILS_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_UPDATE_REQUEST,\n  USER_DETAILS_UPDATE_SUCCESS,\n} from \"../constants/userConstants\";\n\nexport const details = (userData) => async (dispatch) => {\n  dispatch({\n    type: USER_DETAILS_REQUEST,\n    payload: userData,\n  });\n  try {\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: userData });\n\n    // const userObj = {};\n    // userObj[userData[\"userId\"]] = userData;\n    // console.log(\"userObj ----> \", userObj);\n    let existingUsersData =\n      JSON.parse(localStorage.getItem(\"userDetailsV2\")) || [];\n    console.log(\"existingUsersData ---> \", existingUsersData);\n    existingUsersData.push(userData);\n    console.log(\"updatedObject ---> \", existingUsersData);\n    localStorage.setItem(\"userDetailsV2\", JSON.stringify(existingUsersData));\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: {},\n    });\n  }\n};\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n  dispatch({ type: USER_DETAILS_UPDATE_REQUEST, payload: user });\n  const {\n    userDetails: { userDetailsV2 },\n  } = getState();\n  try {\n    const { data } = await Axios.put(`/api/users/profile`, user, {\n      headers: { Authorization: `Bearer ${userInfo.token}` },\n    });\n    dispatch({ type: USER_DETAILS_UPDATE_SUCCESS, payload: data });\n    dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: USER_UPDATE_PROFILE_FAIL, payload: message });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}